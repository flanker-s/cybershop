version: '3.7'

services:
  # FRONTEND
  react:
    container_name: react
    build:
      context: ./frontend
      dockerfile: docker/dockerfile
    environment:
      #####################
      NODE_ENV: ${NODE_ENV}
      #####################
    ports:
      - 3001:3000
    volumes:
      - ./frontend:/usr/src/react
      - /usr/src/react/node_modules
    depends_on:
      - node
    networks:
      - app
  # BACKEND
  node:
    container_name: node
    build:
      context: ./backend
      dockerfile: docker/dockerfile
    environment:
      #####################
      NODE_ENV: ${NODE_ENV}
      NODE_PORT: ${NODE_PORT}
      MONGODB_URL: mongodb://${DB_ADMIN_USERNAME}:${DB_ADMIN_PASSWORD}@mongo:27017/${DATABASE}
      DATABASE: ${DATABASE}
      #####################
    ports:
      - ${NODE_PORT}:${NODE_PORT}
    volumes:
      - ./backend:/usr/src/node
      - /usr/src/node/node_modules
    depends_on:
      - mongo
    networks:
      - app
  # DATABASE
  mongo:
    container_name: mongo
    image: mongo:6.0.4
    restart: always
    environment:
      #####################
      MONGO_INITDB_ROOT_USERNAME: ${DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE}
      MONGO_INITDB_USERNAME: ${DB_ADMIN_USERNAME}
      MONGO_INITDB_PASSWORD: ${DB_ADMIN_PASSWORD}

      #####################
    ports:
      - 27017:27017
    volumes:
      - ./mongodb/data/db:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app
    
  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://${DB_ROOT_USERNAME}:${DB_ROOT_PASSWORD}@mongo:27017/
  #   depends_on:
  #     - mongo
  #   networks:
  #     - app

networks:
  app: